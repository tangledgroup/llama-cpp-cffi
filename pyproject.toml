[project]
name = "llama-cpp-cffi"
version = "0.4.19"
description = "Python binding for llama.cpp using cffi"
authors = [
    { name = "Tangled Group, Inc", email = "info@tangledgroup.com" },
    { name = "Marko Tasic", email = "mtasic85@gmail.com" },
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.10,<4.0"
keywords = [ "llama", "llama-cpp", "llama.cpp", "llama-cpp-cffi", "cffi" ]
classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",

    "License :: OSI Approved :: MIT License",

    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.urls]
homepage = "https://github.com/tangledgroup/llama-cpp-cffi"
repository = "https://github.com/tangledgroup/llama-cpp-cffi"
documentation = "https://github.com/tangledgroup/llama-cpp-cffi"
"Bug Tracker" = "https://github.com/tangledgroup/llama-cpp-cffi/issues"

[project.scripts]
build = "scripts.build:build"
clean = "scripts.clean:clean"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0", "cffi", "setuptools"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [{ include = "llama" }]
include = [
    { path = "llama/**/*.so", format = "wheel" },
    { path = "llama/**/*.dll", format = "wheel" },
    { path = "llama/**/*.dylib", format = "wheel" },
]

[tool.poetry.build]
script = "scripts/build.py"

[tool.poetry.dependencies]
python = "^3.10"
attrs = "^24.2.0"
huggingface-hub = "^0.26.2"
psutil = "^6.1.0"
transformers = "^4.46.1"
jinja2 = "^3.1.4"
sentencepiece = "^0.2.0"
protobuf = "^5.28.3"
numba = "^0.60.0"
vulkan = "^1.3.275.1"
uvloop = {version = "^0.21.0", optional = true}
aiohttp = {extras = ["speedups"], version = "^3.10.10", optional = true}
gunicorn = {version = "23.0.0", optional = true}
openai = {version = "^1.53.0", optional = true}

[tool.poetry.extras]
server = ["uvloop", "aiohttp", "gunicorn", "openai"]

[tool.poetry.group.dev.dependencies]
poetry = "^2.0.1"
cffi = "^1.17.1"
setuptools = "^75.8.0 "
cibuildwheel = "^2.22.0"
# pyright = "^1.1.391 "
# ruff = "^0.8.4"
# mkdocs-material = "^9.5.43"

[tool.cibuildwheel]

[tool.cibuildwheel.linux]
container-engine = { name = "docker", create-args = ["--cpus", "16"]}
build-frontend = "build"
before-build = """
ARCH=$(uname -m)
pip install poetry

if [[ $AUDITWHEEL_PLAT == manylinux* ]]; then
    dnf update -y
    dnf install -y epel-release
    dnf update -y
    dnf group install -y "Development Tools"
    # dnf install -y unzip p7zip p7zip-plugins upx clang-tools-extra libcurl-devel
    dnf install -y clang clang-tools-extra ninja-build gcc-toolset-12

    # cuda requires gcc 12
    source /opt/rh/gcc-toolset-12/enable

    # vulkan
    dnf install -y vulkan-tools vulkan-headers vulkan-loader vulkan-loader-devel vulkan-validation-layers spirv-tools libshaderc libshaderc-devel glslc glslang
else
    # apk -U add unzip 7zip upx clang-extra-tools
    apk -U add clang clang-extra-tools ninja-build

    # vulkan
    if [[ "$ARCH" == "x86_64" ]]; then
        apk -U add mesa-vulkan-ati mesa-vulkan-intel mesa-vulkan-layers mesa-vulkan-swrast vulkan-headers vulkan-loader vulkan-loader-dev vulkan-tools vulkan-validation-layers vulkan-validation-layers-dev vulkan-validation-layers-static shaderc glslang glslang-dev glslang-libs glslang-static
    else
        apk -U add mesa-vulkan-ati mesa-vulkan-layers mesa-vulkan-swrast vulkan-headers vulkan-loader vulkan-loader-dev vulkan-tools vulkan-validation-layers vulkan-validation-layers-dev vulkan-validation-layers-static shaderc glslang glslang-dev glslang-libs glslang-static
    fi
fi
"""

build = ["cp310-*", "cp311-*", "cp312-*", "cp313-*", "pp310-*"]
# build = ["cp312-*"]
# skip = ["*i686", "*musllinux*"]

# skip = ["cp36-*", "cp37-*", "cp38-*", "cp39-*", "pp37-*", "pp38-*", "pp39-*", "*i686"]
# skip = ["cp36-*", "cp37-*", "cp38-*", "cp39-*", "cp313-*", "pp37-*", "pp38-*", "pp39-*", "*i686"]
# skip = ["cp36-*", "cp37-*", "cp38-*", "cp39-*", "pp37-*", "pp38-*", "pp39-*", "*i686", "*manylinux*"]
# skip = ["cp36-*", "cp37-*", "cp38-*", "cp39-*", "cp310-*", "cp311-*", "pp37-*", "pp38-*", "pp39-*", "pp310-*", "*i686"]
# skip = ["cp36-*", "cp37-*", "cp38-*", "cp39-*", "cp310-*", "cp311-*", "pp37-*", "pp38-*", "pp39-*", "pp310-*", "*i686", "*musllinux*"]
# skip = ["cp36-*", "cp37-*", "cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp313-*", "pp37-*", "pp38-*", "pp39-*", "pp310-*", "*i686", "*musllinux*"]
# skip = ["cp36-*", "cp37-*", "cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp313-*", "pp37-*", "pp38-*", "pp39-*", "pp310-*", "*i686", "*musllinux*"]

manylinux-x86_64-image = "quay.io/pypa/manylinux_2_34_x86_64:2025.02.02-1"
manylinux-aarch64-image = "quay.io/pypa/manylinux_2_34_aarch64:2025.02.02-1"
manylinux-pypy_x86_64-image = "quay.io/pypa/manylinux_2_34_x86_64:2025.02.02-1"
manylinux-pypy_aarch64-image = "quay.io/pypa/manylinux_2_34_aarch64:2025.02.02-1"
musllinux-x86_64-image = "quay.io/pypa/musllinux_1_2_x86_64:2025.02.02-1"
musllinux-aarch64-image = "quay.io/pypa/musllinux_1_2_aarch64:2025.02.02-1"
build-verbosity=3
repair-wheel-command = ""
# repair-wheel-command = """
# for file in {wheel}; do
#     tempdir=$(mktemp -d)
#     unzip -d "$tempdir" "$file"
#
#     # Compress shared libraries in the tempdir using UPX
#     find "$tempdir" -type f \\( -name "*.so" -o -name "*.dylib" -o -name "*.dll" \\) -exec upx -9 {} \\;
#
#     # Repackage with 7z
#     (cd "$tempdir" && 7z a -tzip -mx=9 -mfb=258 -mpass=15 -mmt=on "{dest_dir}/$(basename $file)" .)
#
#     # Clean up
#     rm -rf "$tempdir"
# done
# """

[tool.cibuildwheel.macos]

[tool.cibuildwheel.windows]

[tool.cibuildwheel.pyodide]
